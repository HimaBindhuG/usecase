{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./admin.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction AdminComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nexport class AdminComponent {\n  constructor(fb, adminService, router) {\n    this.fb = fb;\n    this.adminService = adminService;\n    this.router = router;\n    this.admin = {\n      email: '',\n      password: ''\n    };\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required]\n    });\n    this.admins = [];\n  }\n  ngOnInit() {\n    this.getAdmins();\n  }\n  getAdmins() {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n  onSubmit() {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n  logout() {\n    this.router.navigate(['/login']);\n  }\n}\nAdminComponent.ɵfac = function AdminComponent_Factory(t) {\n  return new (t || AdminComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AdminService), i0.ɵɵdirectiveInject(i3.Router));\n};\nAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AdminComponent,\n  selectors: [[\"app-admin\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[1, \"container\", \"mt-5\"], [3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [1, \"mt-3\"]],\n  template: function AdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n      i0.ɵɵlistener(\"ngSubmit\", function AdminComponent_Template_form_ngSubmit_1_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(2);\n        return i0.ɵɵresetView(ctx.onLogin(_r0));\n      });\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.admin.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.admin.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 8);\n      i0.ɵɵtext(12, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(13, AdminComponent_div_13_Template, 2, 1, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \" -->\");\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(2);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.admin.email);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.admin.password);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !_r0.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AdminComponent","constructor","fb","adminService","router","email","password","adminForm","group","name","required","dept","address","gender","dob","phone","posting","admins","ngOnInit","getAdmins","subscribe","onSubmit","adminData","value","createAdmin","reset","Object","keys","controls","forEach","key","get","setErrors","logout","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin\\admin.component.ts","C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin\\admin.component.html"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { Admin } from './interfaces';\n// import { AdminService } from './admin.service';\n// import { NgForm } from '@angular/forms';\n\n// @Component({\n//   selector: 'app-admin',\n//   templateUrl: './admin.component.html',\n//   styleUrls: ['./admin.component.css']\n// })\n// export class AdminComponent implements OnInit{\n//   admin: Admin = {\n//     name: '',\n//     email: '',\n//     password: '',\n//     dept: '',\n//     address: '',\n//     gender: '',\n//     dob: '',\n//     phone: '',\n//     posting: ''\n//   };\n//   errorMessage: string = '';\n//   authService: any;\n//   router: any;\n\n//   constructor(private adminService: AdminService) {}\n//   ngOnInit(): void { }\n\n//   onLogin(loginForm: NgForm): void {\n//     const { email, password } = loginForm.value;\n\n//     this.authService.loginAdmin(email, password).subscribe(\n//       () => {\n//         this.router.navigate(['/admin/dashboard']);\n//       },\n//       (error: string) => {\n//         this.errorMessage = error;\n//       }\n//     );\n//   }\n\n//   onSubmit() {\n//     this.adminService.loginAdmin(this.admin.email, this.admin.password).subscribe(isValid => {\n//       if (isValid) {\n//         console.log('Login successful');\n//       } else {\n//         console.log('Invalid email or password');\n//       }\n//     }, error => {\n//       console.log(error);\n//     });\n//   }\n// }\n\n\n\n\n \n\n\n\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { AdminService } from './admin.service';\nimport { Admin } from './interfaces';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css'],\n})\nexport class AdminComponent implements OnInit {\n  adminForm: FormGroup;\n  admins: Admin[] | null | undefined;\n  admin = { email: '', password: '' };\n\n  constructor(private fb: FormBuilder, private adminService: AdminService, private router: Router) {\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password:['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required],\n    });\n    this.admins = [];\n  }\n\n  ngOnInit():void {\n    this.getAdmins();\n  }\n\n  getAdmins(): void {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n\n  onSubmit(): void {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n\n  logout() {\n    this.router.navigate(['/login']);\n  }\n}\n","<div class=\"container mt-5\">\n  <form (ngSubmit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"email\">Email address</label>\n      <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" [(ngModel)]=\"admin.email\" required>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" [(ngModel)]=\"admin.password\" required>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Login</button>\n  </form>\n  <div class=\"mt-3\" *ngIf=\"errorMessage\">{{ errorMessage }}</div>\n</div>\n\n\n\n\n\n<!-- <app-admin></app-admin>\n\n<div>\n    <h2>Admin Dashboard</h2>\n    <p>Welcome, admin!</p>\n    <button (click)=\"logout()\">Logout</button>\n  </div>\n  \n  <h1>Admin List</h1>\n  \n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Department</th>\n        <th>Address</th>\n        <th>Gender</th>\n        <th>Date of Birth</th>\n        <th>Phone</th>\n        <th>Posting</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let admin of admins\">\n        <td>{{ admin.name }}</td>\n        <td>{{ admin.email }}</td>\n        <td>{{ admin.dept }}</td>\n        <td>{{ admin.address }}</td>\n        <td>{{ admin.gender }}</td>\n        <td>{{ admin.dob }}</td>\n        <td>{{ admin.phone }}</td>\n        <td>{{ admin.posting }}</td>\n      </tr>\n    </tbody>\n  </table>\n  \n  <hr>\n  \n  <!-- <h2>Create Admin</h2>\n  \n  <form [formGroup]=\"adminForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" formControlName=\"name\">\n    </div>\n    <div>\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" formControlName=\"email\">\n    </div>\n    <div>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\">\n    </div>\n    <div>\n      <label for=\"dept\">Department:</label>\n      <input type=\"text\" id=\"dept\" formControlName=\"dept\">\n    </div>\n    <div>\n      <label for=\"address\">Address:</label>\n      <input type=\"text\" id=\"address\" formControlName=\"address\">\n    </div>\n    <div>\n      <label for=\"gender\">Gender:</label>\n      <select id=\"gender\" formControlName=\"gender\">\n        <option value=\"Male\">Male</option>\n        <option value=\"Female\">Female</option>\n      </select>\n    </div>\n    <div>\n      <label for=\"dob\">Date of Birth:</label>\n      <input type=\"date\" id=\"dob\" formControlName=\"dob\">\n    </div>\n    <div>\n      <label for=\"phone\">Phone:</label>\n      <input type=\"tel\" id=\"phone\" formControlName=\"phone\">\n    </div>\n    <div>\n      <label for=\"posting\">Posting:</label>\n      <input type=\"text\" id=\"posting\" formControlName=\"posting\">\n    </div>\n    <button type=\"submit\">Create Admin</button>\n  </form> -->\n   -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}