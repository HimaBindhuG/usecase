{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  submitForm(form) {\n    const username = form.value['username'];\n    const password = form.value['password'];\n    const loginType = form.value['login-type'];\n    // Perform login validation here based on the login type\n    if (loginType === 'employee') {\n      // Employee login validation\n      this.http.post('http://127.0.0.1:3000/employee/', {\n        username,\n        password\n      }).subscribe(response => {\n        console.log('Employee login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, error => {\n        console.error('Employee login failed', error);\n      });\n    } else if (loginType === 'manager') {\n      // Manager login validation\n      this.http.post('http://127.0.0.1:9000/manager/', {\n        username,\n        password\n      }).subscribe(response => {\n        console.log('Manager login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, error => {\n        console.error('Manager login failed', error);\n      });\n    } else if (loginType === 'admin') {\n      // Admin login validation\n      this.http.post('http://127.0.0.1:5000/admin/', {\n        username,\n        password\n      }).subscribe(response => {\n        console.log('Admin login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, error => {\n        console.error('Admin login failed', error);\n      });\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;EAAgB;EAEzEC,UAAU,CAACC,IAAY;IACrB,MAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK,CAAC,UAAU,CAAC;IACvC,MAAMC,QAAQ,GAAGH,IAAI,CAACE,KAAK,CAAC,UAAU,CAAC;IACvC,MAAME,SAAS,GAAGJ,IAAI,CAACE,KAAK,CAAC,YAAY,CAAC;IAE1C;IACA,IAAIE,SAAS,KAAK,UAAU,EAAE;MAC5B;MACA,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,iCAAiC,EAAE;QAAEJ,QAAQ;QAAEE;MAAQ,CAAE,CAAC,CAACG,SAAS,CAAEC,QAAa,IAAI;QACpGC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,KAAK,CAAC;QAC7C,IAAI,CAACd,WAAW,CAACe,WAAW,CAAC,IAAI,CAAC;MACpC,CAAC,EAAGC,KAAK,IAAI;QACXN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;KACH,MAAM,IAAIV,SAAS,KAAK,SAAS,EAAE;MAClC;MACA,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,gCAAgC,EAAE;QAAEJ,QAAQ;QAAEE;MAAQ,CAAE,CAAC,CAACG,SAAS,CAAEC,QAAa,IAAI;QACnGC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,KAAK,CAAC;QAC7C,IAAI,CAACd,WAAW,CAACe,WAAW,CAAC,IAAI,CAAC;MACpC,CAAC,EAAGC,KAAK,IAAI;QACXN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;KACH,MAAM,IAAIV,SAAS,KAAK,OAAO,EAAE;MAChC;MACA,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,8BAA8B,EAAE;QAAEJ,QAAQ;QAAEE;MAAQ,CAAE,CAAC,CAACG,SAAS,CAAEC,QAAa,IAAI;QACjGC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,KAAK,CAAC;QAC7C,IAAI,CAACd,WAAW,CAACe,WAAW,CAAC,IAAI,CAAC;MACpC,CAAC,EAAGC,KAAK,IAAI;QACXN,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CAAC;;EAEN;CACD;AAtCYnB,cAAc,eAL1BD,SAAS,CAAC;EACTqB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWtB,cAAc,CAsC1B;SAtCYA,cAAc","names":["Component","LoginComponent","constructor","http","authService","submitForm","form","username","value","password","loginType","post","subscribe","response","console","log","localStorage","setItem","token","setLoggedIn","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  submitForm(form: NgForm) {\n    const username = form.value['username'];\n    const password = form.value['password'];\n    const loginType = form.value['login-type'];\n\n    // Perform login validation here based on the login type\n    if (loginType === 'employee') {\n      // Employee login validation\n      this.http.post('http://127.0.0.1:3000/employee/', { username, password }).subscribe((response: any) => {\n        console.log('Employee login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, (error) => {\n        console.error('Employee login failed', error);\n      });\n    } else if (loginType === 'manager') {\n      // Manager login validation\n      this.http.post('http://127.0.0.1:9000/manager/', { username, password }).subscribe((response: any) => {\n        console.log('Manager login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, (error) => {\n        console.error('Manager login failed', error);\n      });\n    } else if (loginType === 'admin') {\n      // Admin login validation\n      this.http.post('http://127.0.0.1:5000/admin/', { username, password }).subscribe((response: any) => {\n        console.log('Admin login successful');\n        localStorage.setItem('token', response.token);\n        this.authService.setLoggedIn(true);\n      }, (error) => {\n        console.error('Admin login failed', error);\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}