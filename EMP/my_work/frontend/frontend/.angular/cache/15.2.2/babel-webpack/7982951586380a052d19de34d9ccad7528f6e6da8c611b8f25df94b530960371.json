{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  logout() {\n    throw new Error('Method not implemented.');\n  }\n  loginAdmin(email, password) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/admin';\n  }\n  getAdmins() {\n    return this.http.get(this.apiUrl);\n  }\n  createAdmin(admin) {\n    return this.http.post(this.apiUrl, admin);\n  }\n  loginAdmin(email, password) {\n    // Here you would actually make a call to your backend to authenticate the admin\n    // For the purpose of this example, we just assume that any non-empty email and password combination is valid\n    const isValid = email.trim().length > 0 && password.trim().length > 0;\n    this.isLoggedIn = isValid;\n    return of(isValid);\n  }\n  isLoggedIn() {\n    return this.isLoggedIn;\n  }\n  logout() {\n    this.isLoggedIn = false;\n  }\n}\nAdminService.ɵfac = function AdminService_Factory(t) {\n  return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n};\nAdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminService,\n  factory: AdminService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,YAAY;EACvBC,MAAM;IACJ,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAC,UAAU,CAACC,KAAa,EAAEC,QAAgB;IACxC,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAIAI,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,6BAA6B;EAEP;EAEvCC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAU,IAAI,CAACC,MAAM,CAAC;EAC5C;EAEAC,WAAW,CAACC,KAAY;IACtB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACH,MAAM,EAAEE,KAAK,CAAC;EAChD;EACAT,UAAU,CAACC,KAAa,EAAEC,QAAgB;IACxC;IACA;IACA,MAAMS,OAAO,GAAGV,KAAK,CAACW,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,IAAIX,QAAQ,CAACU,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC;IACrE,IAAI,CAACC,UAAU,GAAGH,OAAO;IACzB,OAAOI,EAAE,CAACJ,OAAO,CAAC;EACpB;EAEAG,UAAU;IACR,OAAO,IAAI,CAACA,UAAU;EACxB;EAEAhB,MAAM;IACJ,IAAI,CAACgB,UAAU,GAAG,KAAK;EACzB;;AAjCWjB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAmB,SAAZnB,YAAY;EAAAoB,YAFX;AAAM","names":["AdminService","logout","Error","loginAdmin","email","password","constructor","http","getAdmins","get","apiUrl","createAdmin","admin","post","isValid","trim","length","isLoggedIn","of","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Admin } from './interfaces';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  logout() {\n    throw new Error('Method not implemented.');\n  }\n  loginAdmin(email: string, password: string) {\n    throw new Error('Method not implemented.');\n  }\n\n  private apiUrl = 'http://localhost:5000/admin';\n\n  constructor(private http: HttpClient) {}\n\n  getAdmins(): Observable<Admin[]> {\n    return this.http.get<Admin[]>(this.apiUrl);\n  }\n\n  createAdmin(admin: Admin): Observable<any> {\n    return this.http.post<any>(this.apiUrl, admin);\n  }\n  loginAdmin(email: string, password: string): Observable<boolean> {\n    // Here you would actually make a call to your backend to authenticate the admin\n    // For the purpose of this example, we just assume that any non-empty email and password combination is valid\n    const isValid = email.trim().length > 0 && password.trim().length > 0;\n    this.isLoggedIn = isValid;\n    return of(isValid);\n  }\n\n  isLoggedIn(): boolean {\n    return this.isLoggedIn;\n  }\n\n  logout(): void {\n    this.isLoggedIn = false;\n  }\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}