{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AdminRegistrationComponent = class AdminRegistrationComponent {\n  constructor(fb, adminService, router) {\n    this.fb = fb;\n    this.adminService = adminService;\n    this.router = router;\n    this.admin = {\n      email: '',\n      password: ''\n    };\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required]\n    });\n    this.admins = [];\n  }\n  ngOnInit() {\n    this.getAdmins();\n  }\n  getAdmins() {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n  onSubmit() {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n  logout() {\n    this.router.navigate(['/login']);\n  }\n};\nAdminRegistrationComponent = __decorate([Component({\n  selector: 'app-admin-registration',\n  templateUrl: './admin-registration.component.html',\n  styleUrls: ['./admin-registration.component.css']\n})], AdminRegistrationComponent);\nexport { AdminRegistrationComponent };\n//   admin = { email: '', password: '' };\n//   adminForm: FormGroup = new FormGroup({});\n//   constructor(private http: HttpClient) {}\n//   onSubmit() {\n//     this.http.post('http://localhost:3000/admin/', this.admin).subscribe((response) => {\n//       console.log('Admin registration successful');\n//     }, (error) => {\n//       console.error('Admin registration failed', error);\n//     });\n//   }\n// }","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAA8BC,UAAU,QAAQ,gBAAgB;AAUzD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAKrCC,YAAoBC,EAAe,EAAUC,YAA0B,EAAUC,MAAc;IAA3E,OAAE,GAAFF,EAAE;IAAuB,iBAAY,GAAZC,YAAY;IAAwB,WAAM,GAANC,MAAM;IAFvF,UAAK,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAE;IAGjC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MAC/BL,KAAK,EAAE,CAAC,EAAE,EAAEN,UAAU,CAACW,QAAQ,CAAC;MAChCJ,QAAQ,EAAC,CAAC,EAAE,EAAEP,UAAU,CAACW,QAAQ,CAAC;MAClCC,IAAI,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MAC/BE,OAAO,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MAClCG,MAAM,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACW,QAAQ,CAAC;MACjCI,GAAG,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,QAAQ,CAAC;MAC9BK,KAAK,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,QAAQ,CAAC;MAChCM,OAAO,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACW,QAAQ;KAClC,CAAC;IACF,IAAI,CAACO,MAAM,GAAG,EAAE;EAClB;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,IAAI,CAAChB,YAAY,CAACgB,SAAS,EAAE,CAACC,SAAS,CAACH,MAAM,IAAG;MAC/C,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;EACJ;EAEAI,QAAQ;IACN,MAAMC,SAAS,GAAG,IAAI,CAACf,SAAS,CAACgB,KAAK;IACtC,IAAI,CAACpB,YAAY,CAACqB,WAAW,CAACF,SAAS,CAAC,CAACF,SAAS,CAAC,MAAK;MACtD;MACA,IAAI,CAACb,SAAS,CAACkB,KAAK,EAAE;MACtBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACpB,SAAS,CAACqB,QAAQ,CAAC,CAACC,OAAO,CAACC,GAAG,IAAG;QACjD,IAAI,CAACvB,SAAS,CAACwB,GAAG,CAACD,GAAG,CAAC,EAAEE,SAAS,CAAC,IAAI,CAAC;MAC1C,CAAC,CAAC;MACF;MACA,IAAI,CAACb,SAAS,EAAE;IAClB,CAAC,CAAC;EACJ;EAEAc,MAAM;IACJ,IAAI,CAAC7B,MAAM,CAAC8B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;CACD;AA9CYlC,0BAA0B,eALtCF,SAAS,CAAC;EACTqC,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWrC,0BAA0B,CA8CtC;SA9CYA,0BAA0B;AAmDrC;AACF;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["Component","Validators","AdminRegistrationComponent","constructor","fb","adminService","router","email","password","adminForm","group","name","required","dept","address","gender","dob","phone","posting","admins","ngOnInit","getAdmins","subscribe","onSubmit","adminData","value","createAdmin","reset","Object","keys","controls","forEach","key","get","setErrors","logout","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin-registration\\admin-registration.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, NgForm, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup } from '@angular/forms';\nimport { Admin } from '../admin/interfaces';\n\n@Component({\n  selector: 'app-admin-registration',\n  templateUrl: './admin-registration.component.html',\n  styleUrls: ['./admin-registration.component.css']\n})\nexport class AdminRegistrationComponent {\n  adminForm: FormGroup;\n  admins: Admin[] | null | undefined;\n  admin = { email: '', password: '' };\n\n  constructor(private fb: FormBuilder, private adminService: AdminService, private router: Router) {\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password:['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required],\n    });\n    this.admins = [];\n  }\n\n  ngOnInit():void {\n    this.getAdmins();\n  }\n\n  getAdmins(): void {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n\n  onSubmit(): void {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n\n  logout() {\n    this.router.navigate(['/login']);\n  }\n}\n\n\n\n\n  //   admin = { email: '', password: '' };\n//   adminForm: FormGroup = new FormGroup({});\n\n//   constructor(private http: HttpClient) {}\n\n//   onSubmit() {\n//     this.http.post('http://localhost:3000/admin/', this.admin).subscribe((response) => {\n//       console.log('Admin registration successful');\n//     }, (error) => {\n//       console.error('Admin registration failed', error);\n//     });\n//   }\n// }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}