{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Admin } from '../models/admin';\nlet AdminComponent = class AdminComponent {\n  constructor(formBuilder, adminService) {\n    this.formBuilder = formBuilder;\n    this.adminService = adminService;\n    this.adminForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.getAdmins();\n  }\n  getAdmins() {\n    this.adminService.getAdmins().subscribe(admins => this.admins = admins);\n  }\n  onSubmit() {\n    if (this.adminForm.valid) {\n      const admin = this.adminForm.value;\n      this.adminService.createAdmin(admin).subscribe(() => {\n        this.adminForm.reset();\n        this.getAdmins();\n      });\n    }\n  }\n};\nAdminComponent = __decorate([Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})], AdminComponent);\nexport { AdminComponent };\ncreateAdmin(admin, Admin);\n{\n  this.adminService.createAdmin(admin).subscribe(createdAdmin => {\n    this.admins.push(createdAdmin);\n  });\n}\nupdateAdmin(admin, Admin);\n{\n  this.adminService.updateAdmin(admin.id, admin).subscribe(updatedAdmin => {\n    const index = this.admins.findIndex(a => a.id === updatedAdmin.id);\n    this.admins[index] = updatedAdmin;\n  });\n}\ndeleteAdmin(admin, Admin);\n{\n  this.adminService.deleteAdmin(admin.id).subscribe(() => {\n    const index = this.admins.findIndex(a => a.id === admin.id);\n    this.admins.splice(index, 1);\n  });\n}","map":{"version":3,"mappings":"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","names":["Component","Validators","Admin","AdminComponent","constructor","formBuilder","adminService","adminForm","group","name","required","email","password","minLength","dept","address","gender","dob","phone","posting","ngOnInit","getAdmins","subscribe","admins","onSubmit","valid","admin","value","createAdmin","reset","selector","templateUrl","styleUrls","createdAdmin","push","updateAdmin","id","updatedAdmin","index","findIndex","a","deleteAdmin","splice"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin\\admin.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AdminService } from '../services/admin.service';\nimport { Admin } from '../models/admin';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  adminForm: FormGroup;\n  admins: Admin[];\n\n  constructor(private formBuilder: FormBuilder, private adminService: AdminService) {\n    this.adminForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.getAdmins();\n  }\n\n  getAdmins(): void {\n    this.adminService.getAdmins().subscribe(admins => this.admins = admins);\n  }\n\n  onSubmit(): void {\n    if (this.adminForm.valid) {\n      const admin = this.adminForm.value as Admin;\n      this.adminService.createAdmin(admin).subscribe(() => {\n        this.adminForm.reset();\n        this.getAdmins();\n      });\n    }\n  }\n\n}\n\n\n  createAdmin(admin: Admin) {\n    this.adminService.createAdmin(admin).subscribe(createdAdmin => {\n      this.admins.push(createdAdmin);\n    });\n  }\n\n  updateAdmin(admin: Admin) {\n    this.adminService.updateAdmin(admin.id, admin).subscribe(updatedAdmin => {\n      const index = this.admins.findIndex(a => a.id === updatedAdmin.id);\n      this.admins[index] = updatedAdmin;\n    });\n  }\n\n  deleteAdmin(admin: Admin) {\n    this.adminService.deleteAdmin(admin.id).subscribe(() => {\n      const index = this.admins.findIndex(a => a.id === admin.id);\n      this.admins.splice(index, 1);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}