{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../admin/admin.service\";\nimport * as i3 from \"@angular/router\";\nexport class AdminRegistrationComponent {\n  constructor(fb, adminService, router) {\n    this.fb = fb;\n    this.adminService = adminService;\n    this.router = router;\n    this.admin = {\n      email: '',\n      password: ''\n    };\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required]\n    });\n    this.admins = [];\n  }\n  ngOnInit() {\n    this.getAdmins();\n  }\n  getAdmins() {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n  onSubmit() {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n  logout() {\n    this.router.navigate(['/login']);\n  }\n}\nAdminRegistrationComponent.ɵfac = function AdminRegistrationComponent_Factory(t) {\n  return new (t || AdminRegistrationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AdminService), i0.ɵɵdirectiveInject(i3.Router));\n};\nAdminRegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AdminRegistrationComponent,\n  selectors: [[\"app-admin-registration\"]],\n  decls: 47,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\"], [\"for\", \"dept\"], [\"type\", \"text\", \"id\", \"dept\", \"formControlName\", \"dept\"], [\"for\", \"address\"], [\"type\", \"text\", \"id\", \"address\", \"formControlName\", \"address\"], [\"for\", \"gender\"], [\"id\", \"gender\", \"formControlName\", \"gender\"], [\"value\", \"Male\"], [\"value\", \"Female\"], [\"for\", \"dob\"], [\"type\", \"date\", \"id\", \"dob\", \"formControlName\", \"dob\"], [\"for\", \"phone\"], [\"type\", \"tel\", \"id\", \"phone\", \"formControlName\", \"phone\"], [\"for\", \"posting\"], [\"type\", \"text\", \"id\", \"posting\", \"formControlName\", \"posting\"], [\"type\", \"submit\"]],\n  template: function AdminRegistrationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"admin-registration works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h2\");\n      i0.ɵɵtext(3, \"Create Admin\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AdminRegistrationComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\", 1);\n      i0.ɵɵtext(7, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\", 3);\n      i0.ɵɵtext(11, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"label\", 5);\n      i0.ɵɵtext(15, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\")(18, \"label\", 7);\n      i0.ɵɵtext(19, \"Department:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\", 9);\n      i0.ɵɵtext(23, \"Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\", 11);\n      i0.ɵɵtext(27, \"Gender:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"select\", 12)(29, \"option\", 13);\n      i0.ɵɵtext(30, \"Male\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"option\", 14);\n      i0.ɵɵtext(32, \"Female\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(33, \"div\")(34, \"label\", 15);\n      i0.ɵɵtext(35, \"Date of Birth:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(36, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"div\")(38, \"label\", 17);\n      i0.ɵɵtext(39, \"Phone:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(40, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"div\")(42, \"label\", 19);\n      i0.ɵɵtext(43, \"Posting:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(44, \"input\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"button\", 21);\n      i0.ɵɵtext(46, \"Create Admin\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.adminForm);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","AdminRegistrationComponent","constructor","fb","adminService","router","email","password","adminForm","group","name","required","dept","address","gender","dob","phone","posting","admins","ngOnInit","getAdmins","subscribe","onSubmit","adminData","value","createAdmin","reset","Object","keys","controls","forEach","key","get","setErrors","logout","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin-registration\\admin-registration.component.ts","C:\\Users\\Hima.g\\usecase\\frontend\\frontend\\src\\app\\admin-registration\\admin-registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, NgForm, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup } from '@angular/forms';\nimport { Admin } from '../admin/interfaces';\nimport { AdminService } from '../admin/admin.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-admin-registration',\n  templateUrl: './admin-registration.component.html',\n  styleUrls: ['./admin-registration.component.css']\n})\nexport class AdminRegistrationComponent {\n  adminForm: FormGroup;\n  admins: Admin[] | null | undefined;\n  admin = { email: '', password: '' };\n\n  constructor(private fb: FormBuilder, private adminService: AdminService, private router: Router) {\n    this.adminForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      password:['', Validators.required],\n      dept: ['', Validators.required],\n      address: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      phone: ['', Validators.required],\n      posting: ['', Validators.required],\n    });\n    this.admins = [];\n  }\n\n  ngOnInit():void {\n    this.getAdmins();\n  }\n\n  getAdmins(): void {\n    this.adminService.getAdmins().subscribe(admins => {\n      this.admins = admins;\n    });\n  }\n\n  onSubmit(): void {\n    const adminData = this.adminForm.value;\n    this.adminService.createAdmin(adminData).subscribe(() => {\n      // Clear the form and reset validation\n      this.adminForm.reset();\n      Object.keys(this.adminForm.controls).forEach(key => {\n        this.adminForm.get(key)?.setErrors(null);\n      });\n      // Update the list of admins\n      this.getAdmins();\n    });\n  }\n\n  logout() {\n    this.router.navigate(['/login']);\n  }\n}\n\n\n\n\n  //   admin = { email: '', password: '' };\n//   adminForm: FormGroup = new FormGroup({});\n\n//   constructor(private http: HttpClient) {}\n\n//   onSubmit() {\n//     this.http.post('http://localhost:3000/admin/', this.admin).subscribe((response) => {\n//       console.log('Admin registration successful');\n//     }, (error) => {\n//       console.error('Admin registration failed', error);\n//     });\n//   }\n// }\n","<p>admin-registration works!</p>\n<h2>Create Admin</h2>\n  \n  <form [formGroup]=\"adminForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" formControlName=\"name\">\n    </div>\n    <div>\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" formControlName=\"email\">\n    </div>\n    <div>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\">\n    </div>\n    <div>\n      <label for=\"dept\">Department:</label>\n      <input type=\"text\" id=\"dept\" formControlName=\"dept\">\n    </div>\n    <div>\n      <label for=\"address\">Address:</label>\n      <input type=\"text\" id=\"address\" formControlName=\"address\">\n    </div>\n    <div>\n      <label for=\"gender\">Gender:</label>\n      <select id=\"gender\" formControlName=\"gender\">\n        <option value=\"Male\">Male</option>\n        <option value=\"Female\">Female</option>\n      </select>\n    </div>\n    <div>\n      <label for=\"dob\">Date of Birth:</label>\n      <input type=\"date\" id=\"dob\" formControlName=\"dob\">\n    </div>\n    <div>\n      <label for=\"phone\">Phone:</label>\n      <input type=\"tel\" id=\"phone\" formControlName=\"phone\">\n    </div>\n    <div>\n      <label for=\"posting\">Posting:</label>\n      <input type=\"text\" id=\"posting\" formControlName=\"posting\">\n    </div>\n    <button type=\"submit\">Create Admin</button>\n  </form>\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}